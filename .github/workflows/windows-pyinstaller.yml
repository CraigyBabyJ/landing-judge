name: Windows PyInstaller Build

on:
  workflow_dispatch:
    inputs:
      console:
        description: Include console window (true/false)
        required: false
        default: 'false'
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install pillow

      - name: Generate .ico from PNG (if present)
        shell: bash
        run: |
          mkdir -p build
          if [ -f "static/icons/icon.png" ]; then
            python -c "import os; from PIL import Image; png='static/icons/icon.png'; ico='build/app-icon.ico'; os.makedirs(os.path.dirname(ico), exist_ok=True); im=Image.open(png).convert('RGBA'); sizes=[(16,16),(32,32),(48,48),(64,64),(128,128),(256,256)]; im.save(ico, sizes=sizes, format='ICO'); print('Icon generated at '+ico)"
          else
            echo "No PNG icon at static/icons/icon.png; skipping ICO generation."
          fi

      - name: Select console mode
        shell: bash
        run: |
          CONSOLE="${{ github.event.inputs.console }}"
          if [ -z "$CONSOLE" ]; then CONSOLE="false"; fi
          echo "CONSOLE=$CONSOLE" >> "$GITHUB_ENV"

      - name: Build executable (PyInstaller)
        shell: bash
        run: |
          # Build using the PyInstaller spec for consistent packaging (datas, icon, options)
          python -m PyInstaller --noconfirm LandingJudge.spec

      - name: Verify bundled icon and static paths
        shell: pwsh
        run: |
          $dist = Join-Path (Resolve-Path .).Path 'dist/LandingJudge'
          $iconPng = Join-Path $dist '_internal/static/icons/icon.png'
          $ico = Join-Path (Resolve-Path .).Path 'build/app-icon.ico'
          Write-Host "Checking bundled icon.png at: $iconPng"
          if (-not (Test-Path -LiteralPath $iconPng)) {
            Write-Error "icon.png not found under _internal/static/icons in onedir output"
            exit 1
          }
          Write-Host "Checking generated ICO at: $ico"
          if (-not (Test-Path -LiteralPath $ico)) {
            Write-Error "app-icon.ico was not generated"
            exit 1
          }
          Write-Host "Icon assets verified."

      - name: Package onedir build as zip (Release)
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $zipPath = "dist/LandingJudge-${{ github.ref_name }}-onedir.zip"
          Compress-Archive -Path 'dist/LandingJudge/*' -DestinationPath $zipPath -Force
          Write-Host "Packaged onedir build -> $zipPath"

      - name: Publish GitHub Release (onedir)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/LandingJudge-${{ github.ref_name }}-onedir.zip
          draft: false
          generate_release_notes: true

      - name: Upload artifact (onedir, tag-named)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: LandingJudge-${{ github.ref_name }}-onedir
          path: dist/LandingJudge/

      # No branch artifacts; only tag releases produce assets