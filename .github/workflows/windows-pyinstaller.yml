name: Windows PyInstaller Build

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: Build mode (onedir or onefile)
        required: false
        default: onedir
      console:
        description: Include console window (true/false)
        required: false
        default: 'false'
  push:
    tags:
      - 'v*'
  push:
    branches: [ main ]
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'static/**'
      - 'templates/**'
      - 'LandingJudge.spec'
      - '.github/workflows/windows-pyinstaller.yml'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install pillow

      - name: Generate .ico from PNG (if present)
        shell: bash
        run: |
          mkdir -p build
          if [ -f "static/icons/icon.png" ]; then
            python - <<'PY'
from PIL import Image
import os
png = r'static/icons/icon.png'
ico = r'build/icon.ico'
os.makedirs(os.path.dirname(ico), exist_ok=True)
im = Image.open(png).convert('RGBA')
sizes = [(16,16),(32,32),(48,48),(64,64),(128,128),(256,256)]
im.save(ico, sizes=sizes, format='ICO')
print(f'Icon generated at {ico}')
PY
          else
            echo "No PNG icon at static/icons/icon.png; skipping ICO generation."
          fi

      - name: Select build mode
        shell: bash
        run: |
          MODE="${{ github.event.inputs.build_mode }}"
          if [ -z "$MODE" ]; then MODE="onedir"; fi
          echo "BUILD_MODE=$MODE" >> "$GITHUB_ENV"
          CONSOLE="${{ github.event.inputs.console }}"
          if [ -z "$CONSOLE" ]; then CONSOLE="false"; fi
          echo "CONSOLE=$CONSOLE" >> "$GITHUB_ENV"

      - name: Build executable (PyInstaller)
        shell: bash
        run: |
          if [ "$BUILD_MODE" = "onefile" ]; then MODE_FLAG="--onefile"; else MODE_FLAG="--onedir"; fi
          # Console toggle (default false -> --noconsole)
          if [ "$CONSOLE" = "true" ] || [ "$CONSOLE" = "1" ]; then CONSOLE_FLAG="--console"; else CONSOLE_FLAG="--noconsole"; fi
          ICON_FLAG=""
          if [ -f "build/icon.ico" ]; then ICON_FLAG="--icon build/icon.ico"; fi
          python -m PyInstaller --noconfirm "$MODE_FLAG" $CONSOLE_FLAG $ICON_FLAG \
            --name LandingJudge \
            --add-data "static;static" \
            --add-data "templates;templates" \
            --hidden-import markupsafe._speedups \
            main.py

      - name: Package onedir build as zip (Release)
        if: env.BUILD_MODE == 'onedir'
        shell: pwsh
        run: |
          $zipPath = "dist/LandingJudge-${{ github.ref_name }}-onedir.zip"
          Compress-Archive -Path 'dist/LandingJudge/*' -DestinationPath $zipPath -Force
          Write-Host "Packaged onedir build -> $zipPath"

      - name: Prepare onefile path (Release)
        if: env.BUILD_MODE == 'onefile'
        shell: bash
        run: |
          echo "ONEFILE_PATH=dist/LandingJudge.exe" >> "$GITHUB_ENV"

      - name: Publish GitHub Release (onedir)
        if: env.BUILD_MODE == 'onedir' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/LandingJudge-${{ github.ref_name }}-onedir.zip
          draft: false
          generate_release_notes: true

      - name: Publish GitHub Release (onefile)
        if: env.BUILD_MODE == 'onefile' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/LandingJudge.exe
          draft: false
          generate_release_notes: true

      - name: Upload artifact (onedir)
        if: env.BUILD_MODE == 'onedir'
        uses: actions/upload-artifact@v4
        with:
          name: LandingJudge-${{ github.sha }}-onedir
          path: dist/LandingJudge/

      - name: Upload artifact (onefile)
        if: env.BUILD_MODE == 'onefile'
        uses: actions/upload-artifact@v4
        with:
          name: LandingJudge-${{ github.sha }}-onefile
          path: dist/LandingJudge.exe